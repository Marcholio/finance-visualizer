{"version":3,"sources":["Chart.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["categories","Object","keys","purchases","colors","rent","phone","insurance","car","electronics","groceries","alcohol","entertainment","savings","parseData","period","data","months","reverse","i","length","summed","_","slice","reduce","acc","cur","forEach","c","Math","round","push","assign","month","Chart","state","event","minMax","max","min","target","value","this","setState","react_default","a","createElement","id","FormControl","TextField","label","onChange","handleChange","bind","type","margin","es6","width","height","dataKey","tick","stroke","fill","map","key","stackId","Component","getColor","change","Header","btc","btcChange","stock","stockChange","_this2","axios","get","headers","X-RapidAPI-Key","process","then","res","price","BTCEUR","ask","bid","changes","percent","day","catch","err","console","log","_ref","toFixed","marketSummaryResponse","result","regularMarketPrice","raw","regularMarketChangePercent","_ref2","className","style","color","require","config","App","Header_Header","Chart_Chart","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6274f508.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { AreaChart, XAxis, YAxis, Tooltip, Area } from \"recharts\";\nimport _ from \"lodash\";\nimport { FormControl, TextField } from \"@material-ui/core\";\nimport purchases from \"./data/purchases.json\";\n\nconst categories = Object.keys(purchases[Object.keys(purchases)[0]]);\n\nconst colors = {\n  rent: \"#ff1744\",\n  phone: \"#D500F9\",\n  insurance: \"#3D5AFE\",\n  car: \"#00B0FF\",\n  electronics: \"#00E5FF\",\n  groceries: \"#00E676\",\n  alcohol: \"#76FF03\",\n  entertainment: \"#FFFF00\",\n  savings: \"#FFAB40\"\n};\n\nconst parseData = period => {\n  const data = [];\n\n  const months = Object.keys(purchases).reverse();\n\n  for (let i = period - 1; i < months.length; i++) {\n    const summed = _.slice(months, i - period + 1, i + 1).reduce((acc, cur) => {\n      categories.forEach(\n        c => (acc[c] = Math.round((acc[c] || 0) + purchases[cur][c] / period))\n      );\n\n      return acc;\n    }, {});\n\n    data.push(Object.assign({ month: months[i] }, summed));\n  }\n\n  return data;\n};\n\nexport default class Chart extends Component {\n  state = {\n    data: parseData(1),\n    period: 1\n  };\n\n  handleChange(event) {\n    const minMax = Math.max(Math.min(event.target.value, 24), 1);\n    this.setState({\n      period: minMax,\n      data: parseData(minMax)\n    });\n  }\n\n  render() {\n    return (\n      <div id=\"container\">\n        <div id=\"container-header\">\n          <h2>Monthly average spending</h2>\n          <FormControl>\n            <TextField\n              id=\"period\"\n              label=\"\"\n              value={this.state.period}\n              onChange={this.handleChange.bind(this)}\n              type=\"number\"\n              margin=\"normal\"\n            />\n          </FormControl>\n        </div>\n        <div id=\"chart-container\">\n          <AreaChart data={this.state.data} width={1200} height={500}>\n            <XAxis dataKey=\"month\" tick={{ stroke: \"white\", fill: \"white\" }} />\n            <YAxis tick={{ stroke: \"white\", fill: \"white\" }} />\n            <Tooltip />\n            {categories.map(c => (\n              <Area\n                key={c}\n                type=\"monotone\"\n                dataKey={c}\n                stackId=\"1\"\n                stroke={colors[c]}\n                fill={colors[c]}\n              />\n            ))}\n          </AreaChart>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nconst loadBtcPrice = () =>\n  axios\n    .get(\n      \"https://bitcoinaverage-global-bitcoin-index-v1.p.rapidapi.com/indices/local/ticker/all?crypto=BTC&fiat=EUR\",\n      {\n        headers: {\n          \"X-RapidAPI-Key\": process.env.REACT_APP_RAPID_API_KEY\n        }\n      }\n    )\n    .then(res => ({\n      price:\n        res.data.BTCEUR.ask - (res.data.BTCEUR.ask - res.data.BTCEUR.bid) / 2,\n      change: res.data.BTCEUR.changes.percent.day\n    }))\n    .catch(err => {\n      console.log(err);\n      return { price: \"Not available\", change: null };\n    });\n\nconst loadStockPrice = () =>\n  axios\n    .get(\n      \"https://apidojo-yahoo-finance-v1.p.rapidapi.com/market/get-summary?region=US&lang=en\",\n      {\n        headers: {\n          \"X-RapidAPI-Key\": process.env.REACT_APP_RAPID_API_KEY\n        }\n      }\n    )\n    .then(res => ({\n      price: res.data.marketSummaryResponse.result[0].regularMarketPrice.raw,\n      change:\n        res.data.marketSummaryResponse.result[0].regularMarketChangePercent.raw\n    }))\n    .catch(err => {\n      console.log(err);\n      return { price: \"Not available\", change: null };\n    });\n\nconst getColor = change => (change < 0 ? \"#f44336\" : \"#4caf50\");\n\nexport default class Header extends Component {\n  state = {\n    btc: \"loading...\",\n    btcChange: \"\",\n    stock: \"loading...\",\n    stockChange: \"\"\n  };\n\n  componentWillMount() {\n    loadBtcPrice().then(({ price, change }) =>\n      this.setState({ btc: price.toFixed(2), btcChange: change.toFixed(2) })\n    );\n    loadStockPrice().then(({ price, change }) =>\n      this.setState({ stock: price.toFixed(2), stockChange: change.toFixed(2) })\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"header\">\n        <h1>FINANCE VISUALIZER</h1>\n        <div>\n          <span>BTC / EUR: {this.state.btc}</span>\n          {this.state.btc !== \"loading...\" ? (\n            <span\n              id=\"btcChange\"\n              style={{ color: getColor(this.state.btcChange) }}\n            >\n              {this.state.btcChange}%\n            </span>\n          ) : null}\n        </div>\n        <div>\n          <span>S&P500: {this.state.stock}</span>\n          {this.state.stock !== \"loading...\" ? (\n            <span\n              id=\"stockChange\"\n              style={{ color: getColor(this.state.stockChange) }}\n            >\n              {this.state.stockChange}%\n            </span>\n          ) : null}\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nimport Chart from \"./Chart\";\nimport Header from \"./Header\";\nimport \"./App.css\";\n\nrequire(\"dotenv\").config();\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Chart />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}